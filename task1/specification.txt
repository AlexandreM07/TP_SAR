Specification:

- Les tâches communiquent à travers des channels.
- Une tâche connait au moins 1 broker.
- Une tâche peut parler à plusieurs broker
- Pour établir une connexion, il faut qu'il y ait un connect d'un côté et un accept de l'autre du broker.
- 

-------------
Class Broker:
-------------

- Gère et met en place les connections des cannaux.
- Un broker par machine identifier par un nom.
- Pour établir une connexion, le broker n°1 appelle connect et le broker n°2
doit accepter la connexion.
- Il peut y avoir plusieurs tâche dans un meme broker.
- 2 tâches ne peuvent pas accepter sur un même port d'un même broker.

--------------------------------------------------------------
Broker(String name) : constructeur

- Son nom permet d'identifier la tâche lors de la connexion. 
- Le nom est unique.
--------------------------------------------------------------
Channel accept(int port)

port : le port d'écoute à ouvrir. La notion de port est unique par nom de broker.
Retourne le channel qui lie les ports ouverts des 2 tâches.
Si il n'y a aucune demande sur le port, ne fait rien.
--------------------------------------------------------------
Channel connect(String name, int port)

name: le nom du broker auquel on veut se connecter
port: le port de la tâche courante qu'on ouvre pour la connexion
La fonction est bloquante tant qu'aucune que la connexion n'est pas accepté par
le serveur cible.
--------------------------------------------------------------

--------------
Class Channel:
--------------

Permet de gérer l'échange de message dans entre les tasks.
Il y a seul channel entre deux port d'un même nom de broker.

Propriété du channel de communication:
- FIFO lossles
- Full duplex
- Connexion par flux d'octet (TCP)
- Les méthodes du channel ne sont pas thread safe. Il faut gérer la synchronisation au niveau au dessus du channel.
- Le channel n'est pas posséder de manière unique par un thread.

--------------------------------------------------------------
int read(byte[] bytes, int offset, int length)

bytes: le tableau de bits dans lequel mettre ce qu'on a lu. 
Si le tableau n'est pas vide, remplie à partir du dernier bit remplie.
Si on dépasse le tableau, retourne une exception.
offset: Doit être >= 0.
length: le nombre de bits maximum à lire. Doit être >= 0.

Retourne le nombre de bits réellement lu du channel.
--------------------------------------------------------------
int write(byte[] bytes, int offset, int length)

bytes: le tableau des bits qui contient ce qu'on veut envoyer dans le channel.
offset: L'indice a partir duquel envoyer les bits dans le tableau bytes. Doit être >= 0.
length: le nombre maximum de bit a envoyer. Doit être >= 0.

Retourne le nombre de bit réellement envoyé.
--------------------------------------------------------------
void disconnect()

Déconnecte le channel. Si le channel est déjà déconnecté, ne fait rien.
--------------------------------------------------------------
boolean disconnected()

Retourne si le channel est actullement connecté ou non.
--------------------------------------------------------------

-----------
Class Task:
-----------
C'est la classe qui s'occupe des calculs et des traitements.

--------------------------------------------------------------
Task(Broker b, Runnable r)
Permet de créer une tâche.
--------------------------------------------------------------
static Broker getBroker()
Retourne un Broken alloué.
--------------------------------------------------------------

